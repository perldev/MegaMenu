from django.shortcuts import render

# Create your views here.
from rest_framework import generics

from .models import Product, Brand, Image,  Category, CatItem
from .serializers import ProductSerializer, BrandSerializer, ImageSerializer
from .serializers import CategorySerializer, CatItemSerializer

from django.contrib.auth.models import User
from .models import Content, Chanel

from django.conf import settings
from django.shortcuts import render_to_response, get_object_or_404, redirect, render
from helpers import http403json, http200json
from itertools import tee, izip


def pairwise(iterable):
    "s -> (s0,s1), (s1,s2), (s2, s3), ..."
    a, b = tee(iterable)
    next(b, None)
    return izip(a, b)


def index(request):
    context = {}
    return render(request, 'index.html', context)

def catalog(request):
    context = {}
    return render(request, 'catalog.html', context)

def brands(request):
    context = {}
    return render(request, 'brands.html', context)
    
def contacts(request):
    context = {}
    return render(request, 'contacts.html', context)

def faq(request):
    context = {}
    return render(request, 'faq.html', context)

def blog_cat(request, cat_id):
    return blog(request, cat_id)


def blog(request, cat_id=None):
    context = {}
    i = 1
    cats = []
    cats_title = {}
    for ch in Category.objects.all().order_by("id"):
       art_cats = []
       
       for item in CatItem.objects.filter(opt1_typ = ch).order_by("order"):
            art_cats.append({"item": item,
                             "title": item.opt2_spec,
                             "count": Content.objects.filter(chanel__ext_id=item.id).count()})
            cats_title[item.id] = item.opt2_spec
            
       cats.append({"sub":art_cats, "title": ch.title})

    context["menu"]=cats
    context["current"] = int(cat_id)
    
    cat_title = None
    if context["current"]:
        context["cat_title"] = cats_title[context["current"]]
        context["current_chanel"] = Chanel.objects.get()
        context["current_list"] = pairwise(Content.objects.filter(chanel__ext_id=context["current"]))
    
    return render(request, 'blog.html', context)

    
def blog_item(request, item_id):

    context = {}

    
    return render(request, 'article.html', context)

    
def custom_page(request, name):
    context = {}
    
    if name == "company":
        return render(request, 'company.html', context)
    

# TODO add captcha
def send_marina(request):
    resp = requests.post(API_MAIL_URL, auth=HTTPBasicAuth('api', API_MAIL_GUN),
                        data= {"from": "site@bazis.com",
                               "to":"savemymind@gmail.com",
                               "subject": u"mail from site %s %s" % (request.POST.get("name",""),
                               request.POST.get("email","")),
                               "html": request.POST.get("text","")})
    return http200json(request, {"status": True})

    
class ProductDetail(generics.ListCreateAPIView):
    """
    API endpoint that represents a single user.
    """
    queryset = Product.objects.all()
    model = Product
    serializer_class = ProductSerializer


class BrandDetail(generics.ListCreateAPIView):
    """
    API endpoint that represents a single user.
    """
    model = Brand
    queryset = Brand.objects.all()
    serializer_class = BrandSerializer

class CategoryDetail(generics.ListCreateAPIView):
    """
    API endpoint that represents a single user.
    """
    model = Category
    queryset = Category.objects.all()
    serializer_class = CategorySerializer

class CatItemDetail(generics.ListCreateAPIView):
    """
    API endpoint that represents aCatItem single user.
    """
    model = CatItem
    queryset = CatItem.objects.all()
    serializer_class = CatItemSerializer


class ImageDetail(generics.ListCreateAPIView):
    """
    API endpoint that represents a single user.
    """
    model = Image
    queryset = Image.objects.all()
    serializer_class = ImageSerializer




def delete_chanel(request, cat):

    try:
        chanel = request.POST.get("id_chanel", None)
        content_item = Content.objects.get(id=cat)
        content_item.delete()

    except Content.DoesNotExist:
        return http403json(request)

    return http200json(request, {"status": True})


def edit_chanel(request):
    content_item = None
    try:
        chanel = request.POST.get("id_chanel", None)
        content_item = Content.objects.get(id=chanel)
    except Content.DoesNotExist:
        return http403json(request)

    ordering = request.POST.get("ordering_chanel", 0)
    title = request.POST.get("title_chanel", None)
    content = request.POST.get("content_chanel", None)
    content_item.content = content
    content_item.title = title
    content_item.ordering = ordering
    content_item.save()
    return http200json(request, {"status": True})

def add_chanel(request):
    chanel = None

    try:
        chanel = request.POST.get("id_chanel", None)
        chanel = Chanel.objects.get(title=chanel)
    except Chanel.DoesNotExist:
        return http403json(request)

    ordering = request.POST.get("ordering_chanel", None)
    title = request.POST.get("title_chanel", None)
    content = request.POST.get("content_chanel", None)
    Content(chanel=chanel, content=content, title=title, ordering=ordering).save()
    return http200json(request, {"status": True})

def content_chanels(request):
    context = {}
    for ch in Chanel.objects.all():
        context[ch.title] = Content.objects.filter(chanel = ch).order_by('ordering')


    cats = {}
    num2name = {1:"cat_window", 2:"cat_doors"}
    i = 1
    for ch in Category.objects.all():
       cats[num2name[i]] = [ item for item in CatItem.objects.filter(opt1_typ = ch).order_by("order")]
       
       cats[num2name[i]+"_title"] = ch.title
       i+=1
        

    discont_count = Product.objects.filter(is_discont=True).count()    
    COMPANY_ID = 1
    context["about_company"] = [Content.objects.get(id=COMPANY_ID)]
    if request.user.is_authenticated() and request.user.is_staff:
        return {"cats":cats, 'chanels': context,
                "discont_count": discont_count,
                'is_admin': True }
    else:
        return {"cats":cats, 'chanels': context,
                 "discont_count": discont_count}